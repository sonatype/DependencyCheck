{
    "reportSchema": "1.1",
    "scanInfo": {
        "engineVersion": "$version",
        "dataSource": [
        #foreach($prop in $properties.getMetaData().entrySet())
        #if($foreach.count > 1),#end{
                "name": "$enc.json($prop.key)",
                "timestamp": "$enc.json($prop.value)"
            }
        #end
        ]
    },
    "projectInfo": {
        "name": "$enc.json($applicationName)",
        #if($groupID)"groupID":"$enc.json($groupID)",#end
        #if($artifactID)"artifactID":"$enc.json($artifactID)",#end
        #if($applicationVersion)"version":"$enc.json($applicationVersion)",#end
        "reportDate": "$scanDateXML",
        "credits": {
            "NVD": "This report contains data retrieved from the National Vulnerability Database: http://nvd.nist.gov",
            "NSP": "This report may contain data retrieved from the Node Security Platform: https://nodesecurity.io",
            "OSSINDEX": "This report may contain data retrieved from the Sonatype OSS Index: https://ossindex.sonatype.org",
            "RETIREJS": "This report may contain data retrieved from the RetireJS community: https://retirejs.github.io/retire.js/"
        }
    },
    "dependencies": [
        #foreach($dependency in $dependencies)#if($foreach.count > 1),#end{
            "isVirtual": #if($dependency.isVirtual())true#{else}false#end,
            "fileName": "$enc.json($dependency.DisplayFileName)",
            "filePath": "$enc.json($dependency.FilePath)"
            #if(!$dependency.isVirtual()),"md5": "$enc.json($dependency.Md5sum)",
            "sha1": "$enc.json($dependency.Sha1sum)",
            "sha256": "$enc.json($dependency.Sha256sum)"#end
            #if($dependency.description),"description": "$enc.json($dependency.description)"#end
            #if($dependency.license),"license": "$enc.json($dependency.license)"#end
            #if ($dependency.projectReferences.size()>0)
            ,"projectReferences": [
            #set($loopCount=0)
            #foreach($ref in $dependency.projectReferences)
                #set($loopCount=$loopCount+1)
                #if($loopCount>1),#end
                "$enc.json($ref)"
            #end
            ]
            #end
            #if ($dependency.getRelatedDependencies().size()>0)
            ,"relatedDependencies": [
                #foreach($related in $dependency.getRelatedDependencies()) #if($foreach.count > 1),#end {
                    "isVirtual": #if($dependency.isVirtual())true#{else}false#end,
                    "filePath": "$enc.json($related.FilePath)"
                    #if(!$related.isVirtual()),"sha256": "$enc.json($related.Sha256sum)",
                    "sha1": "$enc.json($related.Sha1sum)",
                    "md5": "$enc.json($related.Md5sum)"#end#if($related.getIdentifiers()),
                    "identifiers": [
                        #set($loopCount=0)
                        #foreach($id in $related.getIdentifiers())
                            #if ($id.type=="maven" || $id.type=="npm")
                                #set($loopCount=$loopCount+1)
                                #if($loopCount>1),#end
                                {
                                    "type": "$enc.json($id.type)",
                                    "id": "$id.value"
                                    #if ($id.url),"url": "$enc.json($id.url)"#end
                                    #if ($id.notes),"notes": "$enc.json($id.notes)"#end
                                    #if ($id.description),"description":"$enc.json($id.description)"#end
                                }
                            #end
                        #end
                    ]#end
                }
                #end
            ]
            #end
            ,"evidenceCollected": {
                "vendorEvidence": [
                    #foreach($evidence in $dependency.getEvidence($VENDOR))
                        #if($foreach.count > 1),#end{
                            "type": "vendor",
                            "confidence": "$enc.json($evidence.getConfidence().toString())",
                            "source": "$enc.json($evidence.getSource())",
                            "name": "$enc.json($evidence.getName())",
                            "value": "$enc.json($evidence.getValue().trim())"
                        }
                    #end
                ],
                "productEvidence": [
                    #foreach($evidence in $dependency.getEvidence($PRODUCT))
                        #if($foreach.count > 1),#end{
                            "type": "product",
                            "confidence": "$enc.json($evidence.getConfidence().toString())",
                            "source": "$enc.json($evidence.getSource())",
                            "name": "$enc.json($evidence.getName())",
                            "value": "$enc.json($evidence.getValue().trim())"
                    }
                    #end
                ],
                "versionEvidence": [
                    #foreach($evidence in $dependency.getEvidence($VERSION))
                    #if($foreach.count > 1),#end
                    {
                        "type": "version",
                        "confidence": "$enc.json($evidence.getConfidence().toString())",
                        "source": "$enc.json($evidence.getSource())",
                        "name": "$enc.json($evidence.getName())",
                        "value": "$enc.json($evidence.getValue().trim())"
                    }
                    #end
                ]
            }
            #if($dependency.getIdentifiers() && $dependency.getIdentifiers().size()>0)
                ,"identifiers": [
                #foreach($id in $dependency.getIdentifiers())
                    #if($foreach.count > 1),#end
                    {
                        "name": "$id.value",
                        "type": "$enc.json($id.type)"
                        #if($id.confidence),"confidence": "$id.confidence"#end
                        #if($id.url),"url": "$enc.json($id.url)"#end
                        #if($id.description),"description": "$enc.json($id.description)"#end
                        #if($id.notes),"notes": "$enc.json($id.notes)"#end
                    }
                #end
            ]#end
            #if($dependency.getSuppressedIdentifiers() && $dependency.getSuppressedIdentifiers().size()>0)
                ,"suppressedIdentifiers": [
                #foreach($id in $dependency.getSuppressedIdentifiers())
                    #if($foreach.count > 1),#end
                    {
                        "name": "$id.value",
                        "type": "$enc.json($id.type)"
                        #if($id.confidence),"confidence": "$id.confidence"#end
                        #if($id.url),"url": "$enc.json($id.url)"#end
                        #if($id.description),"description": "$enc.json($id.description)"#end
                        #if($id.notes),"notes": "$enc.json($id.notes)"#end
                    }
                #end
            ]#end

            #if($dependency.getVulnerabilities().size()>0)
            ,"vulnerabilities": [
            #foreach($vuln in $dependency.getVulnerabilities(true))#if($foreach.count > 1),#end {
                "source": "$enc.json($vuln.getSource().name())",
                "name": "$enc.json($vuln.name)",
                "cvssScore": "$vuln.cvssScore",
                #if ($vuln.getSource().name().equals("NVD"))
                    "cvssAccessVector": "$enc.json($vuln.cvssAccessVector)",
                    "cvssAccessComplexity": "$enc.json($vuln.cvssAccessComplexity)",
                    "cvssAuthenticationr": "$enc.json($vuln.cvssAuthentication)",
                    "cvssConfidentialImpact": "$enc.json($vuln.cvssConfidentialityImpact)",
                    "cvssIntegrityImpact": "$enc.json($vuln.cvssIntegrityImpact)",
                    "cvssAvailabilityImpact": "$enc.json($vuln.cvssAvailabilityImpact)",
                #end
                #if ($vuln.cvssScore<4.0)"severity": "Low",
                #elseif ($vuln.cvssScore>=7.0)"severity": "High",
                #else "severity": "Medium",#end
                "cwe": "#if ($vuln.cwe)$enc.json($vuln.cwe)#end",
                "description": "$enc.json($vuln.description)",
                "notes": "#if ($vuln.notes)$enc.json($vuln.notes)#end",
                "references": [
                    #foreach($ref in $vuln.getReferences())
                        #if($foreach.count > 1),#end {
                        "source": "$enc.json($ref.source)",
                        "url": "$enc.json($ref.url)",
                        "name": "$enc.json($ref.name)"
                    }#end
                ],
                "vulnerableSoftware": [
                    #foreach($vs in $vuln.getVulnerableSoftware())
                        #if($foreach.count > 1),#end {
                        "software": "$enc.json($vs.name)"
                        #if($vs.hasPreviousVersion()) ,"allPreviousVersion": "true"#end
                    }#end
                ]
                }#end
            ]#end

            #if($dependency.getSuppressedVulnerabilities().size()>0 || $dependency.getSuppressedVulnerabilities().size()>0)
            ,"suppressedVulnerabilities": [
                #foreach($vuln in $dependency.getSuppressedVulnerabilities(true))#if($foreach.count > 1),#end {
                "source": "$enc.json($vuln.getSource().name())",
                "name": "$enc.json($vuln.name)",
                "cvssScore": "$vuln.cvssScore",
                #if ($vuln.getSource().name().equals("NVD"))
                    "cvssAccessVector": "$enc.json($vuln.cvssAccessVector)",
                    "cvssAccessComplexity": "$enc.json($vuln.cvssAccessComplexity)",
                    "cvssAuthenticationr": "$enc.json($vuln.cvssAuthentication)",
                    "cvssConfidentialImpact": "$enc.json($vuln.cvssConfidentialityImpact)",
                    "cvssIntegrityImpact": "$enc.json($vuln.cvssIntegrityImpact)",
                    "cvssAvailabilityImpact": "$enc.json($vuln.cvssAvailabilityImpact)",
                #end
                #if ($vuln.cvssScore<4.0) "severity": "Low",
                #elseif ($vuln.cvssScore>=7.0) "severity": "High",
                #else "severity": "Medium", 
                #end
                "cwe": "#if ($vuln.cwe)$enc.json($vuln.cwe)#end",
                "description": "$enc.json($vuln.description)",
                "notes": "#if ($vuln.notes)$enc.json($vuln.notes)#end",
                "references": [
                    #foreach($ref in $vuln.getReferences())
                        #if($foreach.count > 1),#end {
                    "source": "$enc.json($ref.source)",
                    "url": "$enc.json($ref.url)",
                    "name": "$enc.json($ref.name)"
                    }#end
                ],
                "vulnerableSoftware": [
                    #foreach($vs in $vuln.getVulnerableSoftware())
                        #if($foreach.count > 1),#end {
                        "name": "$enc.json($vs.name)"
                        #if($vs.hasPreviousVersion()) ,"allPreviousVersion": "true"#end
                    }#end
                ]
                }#end
            ]#end
        }#end
    ]
}
